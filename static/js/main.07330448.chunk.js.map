{"version":3,"sources":["components/navBar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","style","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","value","classes","Component","Counters","onReset","counters","map","key","App","state","handleDelete","counterId","filter","c","setState","handleReset","handleIncrement","index","indexOf","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAgBeA,EAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACd,OACI,yBAAKC,UAAU,gCACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SAEI,0BAAMD,UAAU,oCACXD,MC6BNG,E,iLAlCJ,IAAD,OACR,OACC,6BACC,0BAAMC,MAAOC,KAAKD,MAAOH,UAAWI,KAAKC,mBACvCD,KAAKE,eAEP,4BACCC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UACjDV,UAAU,mCAFX,YAMA,4BACCO,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KACtDZ,UAAU,4BAFX,a,oCAUY,IACNa,EAAUT,KAAKI,MAAME,QAArBG,MACR,OAAiB,IAAVA,EAAc,OAASA,I,wCAI9B,IAAIC,EAAU,mBAEd,OADAA,GAAwC,IAA7BV,KAAKI,MAAME,QAAQG,MAAc,UAAY,c,GA9BpCE,aC6BPC,E,iLA1BJ,IAAD,EAC6CZ,KAAKI,MAAlDS,EADA,EACAA,QAASC,EADT,EACSA,SAAUP,EADnB,EACmBA,SAAUF,EAD7B,EAC6BA,YAErC,OACC,6BACC,4BACCF,QAASU,EACTjB,UAAU,8BAFX,SAMCkB,EAASC,KAAI,SAAAT,GAAO,OACpB,kBAAC,EAAD,CACCU,IAAKV,EAAQE,GACbD,SAAUA,EACVF,YAAaA,EACbC,QAASA,Y,GAlBQK,a,wOCsDRM,E,2MAlDbC,MAAQ,CACNJ,SAAU,CACR,CAAEN,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,K,EAIpBU,aAAe,SAAAC,GACb,IAAMN,EAAW,EAAKI,MAAMJ,SAASO,QAAO,SAAAC,GAAC,OAAIA,EAAEd,KAAOY,KAC1D,EAAKG,SAAS,CAAET,c,EAGlBU,YAAc,WACZ,IAAMV,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAO,GAEvC,OADAA,EAAEb,MAAQ,EACHa,KAET,EAAKC,SAAS,CAAET,c,EAGlBW,gBAAkB,SAAAnB,GAChB,IAAMQ,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BY,EAAQZ,EAASa,QAAQrB,GAC/BQ,EAASY,G,yVAAT,IAAuBpB,GACvBQ,EAASY,GAAOjB,QAChB,EAAKc,SAAS,CAAET,c,wEAIhB,OACE,kBAAC,IAAMc,SAAP,KACE,kBAAC,EAAD,CACEjC,cAAeK,KAAKkB,MAAMJ,SAASO,QAAO,SAAAC,GAAC,OAAIA,EAAEb,MAAQ,KAAGoB,SAE9D,0BAAOjC,UAAU,aACf,kBAAC,EAAD,CACEkB,SAAUd,KAAKkB,MAAMJ,SACrBD,QAASb,KAAKwB,YACdnB,YAAaL,KAAKyB,gBAClBlB,SAAUP,KAAKmB,qB,GA3CTR,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.07330448.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n    return (\r\n        <nav className='navbar navbar-light bg-light'>\r\n            <a className='navbar-brand' href='#'>\r\n                NavBar\r\n                <span className='badge badge-pill badge-secondary'>\r\n                    {totalCounters}\r\n                </span>\r\n            </a>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\nexport default NavBar;\r\n\r\n","import React, { Component } from \"react\"\r\n\r\nclass Counter extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<span style={this.style} className={this.getBadgeClasses()}>\r\n\t\t\t\t\t{this.formatCount()}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\r\n\t\t\t\t\tclassName=\"btn btn-secondary btn-small m-2\"\r\n\t\t\t\t>\r\n\t\t\t\t\tIncrease\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => this.props.onDelete(this.props.counter.id)}\r\n\t\t\t\t\tclassName=\"btn btn-danger btn-small\"\r\n\t\t\t\t>\r\n\t\t\t\t\tDelete\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tformatCount() {\r\n\t\tconst { value } = this.props.counter;\r\n\t\treturn value === 0 ? \"Zero\" : value;\r\n\t};\r\n\r\n\tgetBadgeClasses() {\r\n\t\tlet classes = \"badge m-2 badge-\";\r\n\t\tclasses += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n\t\treturn classes;\r\n\t};\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\"\r\nimport Counter from \"./counter\"\r\n\r\nclass Counters extends Component {\r\n\r\n\trender() {\r\n\t\tconst { onReset, counters, onDelete, onIncrement } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={onReset}\r\n\t\t\t\t\tclassName=\"btn btn-primary btn-sm m-2\"\r\n\t\t\t\t>\r\n\t\t\t\t\tReset\r\n\t\t\t\t</button>\r\n\t\t\t\t{counters.map(counter => (\r\n\t\t\t\t\t<Counter\r\n\t\t\t\t\t\tkey={counter.id}\r\n\t\t\t\t\t\tonDelete={onDelete}\r\n\t\t\t\t\t\tonIncrement={onIncrement}\r\n\t\t\t\t\t\tcounter={counter}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from 'react';\nimport NavBar from './components/navBar';\nimport Counters from \"./components/counters\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 3 },\n      { id: 3, value: 0 },\n      { id: 4, value: 9 },\n    ],\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        < main className='container' >\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main >\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}